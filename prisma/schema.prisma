generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Escapade {
  id                     Int           @id @default(autoincrement())
  titre                  String        @db.VarChar(100)
  description            String
  description_principale String
  votre_escapade         String
  info_pratique          String
  region                 String        @db.VarChar(100)
  duree                  Int
  prix                   Float
  favori                 Favori[]
  photo                  Photo[]
  reservation            Reservation[]
  thematiques            EscapadeThematique[]
  options                Option[]
  availableDates         AvailableDate[]
}

model Favori {
  id            Int         @id @default(autoincrement())
  utilisateurId Int
  escapadeId    Int
  escapade      Escapade    @relation(fields: [escapadeId], references: [id])
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
}

model Paiement {
  id            Int         @id @default(autoincrement())
  reservationId Int
  montant       Float
  date          DateTime
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model Photo {
  id          Int      @id @default(autoincrement())
  url_photo   String
  description String
  id_escapade Int
  escapade    Escapade @relation(fields: [id_escapade], references: [id])
}

model Reservation {
  id                   Int              @id @default(autoincrement())
  utilisateurId        Int
  escapadeId           Int
  date_depart          Int
  nombre_adulte        Int
  nombre_enfant        Int
  assurance_annulation Boolean          @default(false)
  accepter_conditions  Boolean          @default(false)
  prix_total           Float
  paiement             Paiement[]
  escapade             Escapade         @relation(fields: [escapadeId], references: [id])
  utilisateur          Utilisateur      @relation(fields: [utilisateurId], references: [id])
  availableDate        AvailableDate    @relation(fields: [date_depart], references: [id])
  options              ReservationOption[]
}

model AvailableDate {
  id            Int           @id @default(autoincrement())
  date          DateTime
  escapadeId    Int
  escapade      Escapade      @relation(fields: [escapadeId], references: [id])
  reservations  Reservation[]
}

model Utilisateur {
  id               Int           @id @default(autoincrement())
  nom              String
  prenom           String
  email            String        @unique
  mot_de_passe     String
  date_de_creation DateTime      @default(now())
  facebook_id      String?       @unique
  favori           Favori[]
  reservation      Reservation[]
}

model Thematique {
  id           Int                  @id @default(autoincrement())
  nom          String               @db.VarChar(100)
  escapades    EscapadeThematique[]
}

model EscapadeThematique {
  escapadeId   Int
  thematiqueId Int
  escapade     Escapade   @relation(fields: [escapadeId], references: [id])
  thematique   Thematique @relation(fields: [thematiqueId], references: [id])
  @@id([escapadeId, thematiqueId])
}

model Option {
  id            Int                   @id @default(autoincrement())
  description   String
  prix          Float
  escapadeId    Int
  escapade      Escapade              @relation(fields: [escapadeId], references: [id])
  reservations  ReservationOption[]
}

model ReservationOption {
  id             Int                @id @default(autoincrement())
  reservationId  Int
  optionId       Int
  reservation    Reservation        @relation(fields: [reservationId], references: [id])
  option         Option             @relation(fields: [optionId], references: [id])
}
